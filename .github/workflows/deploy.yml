name: CI/CD Pipeline for Next.js Frontend

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} --password-stdin

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: "npm"

      - name: Install dependencies
        run: npm install

      # Set environment variables
      - name: Set Environment Variables
        run: |
          echo "NEXT_PUBLIC_API_BASE_URL=${{ secrets.API_BASE_URL }}" >> .env

      - name: Build Next.js project
        run: npm run build

      - name: Build and Push Docker Image to GHCR
        run: |
          IMAGE_NAME=ghcr.io/${{ secrets.GHCR_USERNAME }}/nextjs-app
          echo "Building Docker image with API Base URL..."
          docker build --build-arg NEXT_PUBLIC_API_BASE_URL=${{ secrets.API_BASE_URL }} -t $IMAGE_NAME:latest .
          
          echo "Pushing Docker image to GHCR..."
          docker push $IMAGE_NAME:latest


  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VM via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            IMAGE_NAME=ghcr.io/${{ secrets.GHCR_USERNAME }}/nextjs-app
            CONTAINER_NAME=nextjs-app
            ENV_PATH="${{ secrets.ENV_PATH }}/.env.production"  # This is set in GitHub Secrets

            echo "Pulling latest image..."
            docker pull $IMAGE_NAME:latest

            echo "Stopping and removing old container..."
            docker rm -f $CONTAINER_NAME || true

            echo "Running new container..."
            docker run -d --name $CONTAINER_NAME -p 3000:3000 \
            -e NEXT_PUBLIC_API_BASE_URL=http://209.38.56.155:8090 \
            --restart always \
            $IMAGE_NAME:latest

            echo "Removing unused Docker images..."
            docker image prune -af
